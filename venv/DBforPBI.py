# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\pythonProject1\venv\desforclock.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import time
import requests
import datetime
from datetime import date,timedelta
import logging
from time import sleep
import xmltodict
import threading
import xml.etree.ElementTree as ET
import mysql.connector



""" TODO
  [*] Получить токен(Автризация)
  [*] В цикле начать делать запросы на отчеты по продажм
    [*] Если ошибка токена или еще чего-то, снова получить токен(новые)


  [*] Метод для получения токена
  [*] Метод для получения отчета по продажм
  [*] Метод для парсинга отчета[?XML, ?JSON]
  [*] Метод для генерации url для отчета
"""

IIKO_URL = 'https://bahandi-co.iiko.it/resto/api'
IIKO_LOGIN = 'BB_Salary'
IIKO_PASSWORD = 'a2db784ded68d5a827b2c3690e9fa5131eedf322'

token = None
auth_url = 'https://bahandi-co.iiko.it/resto/api/'
url = "https://bahandi-co.iiko.it/resto/api/reports/olap?key=4ddcef3c-539b-0767-1dea-651e568ec892&report=SALES&from=21.12.2021&to=21.12.2021&agr=UniqOrderId.OrdersCount&agr=DishDiscountSumInt.average&"

def db_conn ():
    conn = mysql.connector.connect(user='root',
                                   password='',
                                   host='localhost',
                                   database='database')

    # in our xml file student is the root for all
    # student data.
    data2 = tree.findall('student')

    # retrieving the data and insert into table
    # i value for xml data #j value printing number of
    # values that are stored

        # sql query to insert data into database
        data = """INSERT INTO vignan(name,id,department) VALUES(%s,%s,%s)"""

        # creating the cursor object
        c = conn.cursor()

        # executing cursor object
        c.execute(data, (name, id, department))
        conn.commit()


def get_token():
    url = 'https://bahandi-co.iiko.it/resto/api/auth?login=' + IIKO_LOGIN + '&pass=' + IIKO_PASSWORD
    response = requests.get(url)
    if response.status_code == 200:
        logout = requests.get('https://bahandi-co.iiko.it/api/logout?key=%s' % response.text).text
        print(response.text)
        return response.text
    else:
        time.sleep(30)
        token = None
        return None
def get_sales():
    global token
    with open('get_sales.txt', 'a+') as file:
        file.write(datetime.datetime.now().strftime('%H:%M:%S') + 'start function \n')
        todaydate = date.today()
        str_date = todaydate.strftime("%d.%m.%Y")
        if token is None:
            token = get_token()
        file.write(datetime.datetime.now().strftime('%H:%M:%S') + token + ' \n')
        'https://bahandi-co.iiko.it/resto/api/reports/productExpense?key=' + token + '&department=6fa71809-7b0e-44ae-aa79-62d44a75d32e&dateFrom=' + str_date + '&dateTo=' + str_date
        url = 'https://bahandi-co.iiko.it/resto/api/reports/olap?key=' + token + '&report=SALES&from=' + str_date + '&to=' + str_date + '&agr=UniqOrderId.OrdersCount'
        file.write(datetime.datetime.now().strftime('%H:%M:%S') + url + ' \n')

        # 'https://bahandi-co.iiko.it/resto/api/reports/olap?key=6704df95-dada-c094-6cb9-0d5471717b7f&report=SALES&from=14.12.2021&to=14.12.2021&agr=UniqOrderId.OrdersCount'
        response = requests.get(url)
        if response.status_code != 200:
            token = get_token()
        else:
            tree = ET.parse(response.text)
            for i, j in zip(data2, range(1, 6)):
                name = i.find('name').text
                id = i.find('id').text
                department = i.find('department').text
            t_data = parsed_data['report']['r']['UniqOrderId.OrdersCount']
            file.write(datetime.datetime.now().strftime('%H:%M:%S') + response.text + ' \n')
            file.write(datetime.datetime.now().strftime('%H:%M:%S') + t_data + '\n')
            file.write('end loop\n#################################################################\n\n ')
            return t_data
        
def get_cons() :
    yesterdaydate = date.today() - timedelta(days=1)
    str_date = yesterdaydate.strftime("%d.%m.%Y")
    url = 'https://bahandi-co.iiko.it/resto/api/reports/productExpense?key=' + token + '&department=6fa71809-7b0e-44ae-aa79-62d44a75d32e&dateFrom=' + str_date + '&dateTo=' +str_date
    url2 = 'https://bahandi-co.iiko.it/resto/api/reports/olap?key=' + token + '&report=SALES&from=' + str_date + '&to=' + str_date + '&agr=UniqOrderId.OrdersCount&groupRow=OrderDeleted'
    # print('yester', url)
    response = requests.get(url)
    response2 = requests.get(url2)
    parsed_data = xmltodict.parse(response.text)
    parsed_data2 = xmltodict.parse(response2.text)['report']['r']
    # print(parsed_data2)x
    del_o = 0
    t_data = parsed_data['report']['r']['UniqOrderId.OrdersCount']
    # del_o = parsed_data2['report']['r']['UniqOrderId.OrdersCount']\
    print(parsed_data2, parsed_data, 'Yesterdaysales')
    return (
        {
            'deleted': int(float(
                [x['UniqOrderId.OrdersCount'] for x in filter(lambda x: x['OrderDeleted'] == 'DELETED', parsed_data2)][
                    0])),
            'not_deleted': int(float([x['UniqOrderId.OrdersCount'] for x in
                                      filter(lambda x: x['OrderDeleted'] == 'NOT_DELETED', parsed_data2)][0])),
        }
    )

def sales_yesterday():
    yesterdaydate = date.today() - timedelta(days=1)
    str_date = yesterdaydate.strftime("%d.%m.%Y")
    url = 'https://bahandi-co.iiko.it/resto/api/reports/olap?key=' + token  + '&report=SALES&from=' + str_date + '&to='+ str_date +'&agr=UniqOrderId.OrdersCount'
    url2 = 'https://bahandi-co.iiko.it/resto/api/reports/olap?key=' + token  + '&report=SALES&from=' + str_date + '&to='+ str_date +'&agr=UniqOrderId.OrdersCount&groupRow=OrderDeleted'
    # print('yester', url)
    response = requests.get(url)
    response2 = requests.get(url2)
    parsed_data = xmltodict.parse(response.text)
    parsed_data2 = xmltodict.parse(response2.text)['report']['r']
    #print(parsed_data2)x
    del_o = 0
    t_data = parsed_data['report']['r']['UniqOrderId.OrdersCount']
    #del_o = parsed_data2['report']['r']['UniqOrderId.OrdersCount']\
    print(parsed_data2,parsed_data,'Yesterdaysales')
    return (
        {
        'deleted': int(float([x['UniqOrderId.OrdersCount'] for x in filter(lambda x:x['OrderDeleted']=='DELETED', parsed_data2)][0])),
        'not_deleted':int(float([x['UniqOrderId.OrdersCount'] for x in filter(lambda x: x['OrderDeleted'] == 'NOT_DELETED', parsed_data2)][0])),
        }
    )



def avg_check():
    todaydate = date.today()
    str_date = todaydate.strftime("%d.%m.%Y")
    url = 'https://bahandi-co.iiko.it/resto/api/reports/olap' \
          '?key=' + token + \
          '&report=SALES' \
          '&from=' + str_date + \
          '&to=' + str_date + \
          '&agr=DishDiscountSumInt.average'
    check = requests.get(url)
    # print('avgcheck',url)
    response = requests.get(url)
    parsed_data = xmltodict.parse(response.text)
    t_data = parsed_data['report']['r']['DishDiscountSumInt.average']
    print('avgcheck',t_data)
    return t_data

    def loop_back(self):
        while True:
            try:

                time.sleep(30)
            except Exception as e:
                print('exception error', e, end='\n\n#############################\n')

